{
  
    
        "post0": {
            "title": "Modelling Differential Equations in Python",
            "content": "Introduction . I&#39;ve long been interested in modelling biological systems with mathematics. This is going to be a series which goes over how to do that (for simple systems of course). . Single Differential Equation (Decay) . The first differential differential equation we&#39;re going to look at is simple exponential decay: $$ dfrac{dy}{dt} = -y $$ . The solution to this ODE is going to be relatively simple to find: . $$ begin{align} dfrac{dy}{dt} &amp;= -y - int dfrac{1}{y} dy &amp;= int 1 dt - ln(y) + k_{1} &amp;= t + k_{2} ln(y) &amp;= -t + k_{3} y &amp;= Ke^{-t} end{align} $$In this case, we have one parameter that we dont know, and that is the value of $K$. We can find this with an initial condition. So for example if $y(0) = 1$ then we&#39;d have that . $$ begin{align} y(0) &amp;= 1 = Ke^{-0} 1 &amp;= K end{align} $$Cool. Now let&#39;s see how we can build this model and plot the solution: . from scipy.integrate import solve_ivp import numpy as np import matplotlib.pyplot as plt plt.style.use(&#39;seaborn&#39;) plt.rcParams.update({&#39;font.size&#39;: 12}) . . First thing we need to work through is how to define the model. We&#39;ll be using solve_ivp rather than odeint from the scipy.integrate library. Why? Because odeint is now outdated. I&#39;ll provide a refrence to this later. . In the case of solve_ivp, we need to create our model with three things: . $t$: The time | $y$: The variable | Other arguments | At this second, we&#39;re going to ignore that last thing, because it&#39;s not necessary for us (yet). . Here&#39;s how we can model decay: . def decay_model(t,y): &quot;&quot;&quot; Simple decay model dy/dt = -y &quot;&quot;&quot; return -y . Now that we have our model created, we can feed it into solve_ivp. To do this, we need to determine a few things. Specifically: . t_span: The time over which we want to evaluate | y0: The initial value of our function | dense_output: Whether we want our output to be smooth | Now there are many other options in solve_ivp, but for now we&#39;ll go over these, just so we can get familiar. . We can set the t_span to be from $t = 0$ to $t = 10$, which we denote with a tuple. We can set our initial value to be 1 (like we showed above), and we want a dense output. Just to throw a curve ball in there (and not put ourselves to sleep) I&#39;ll solve it for a variety of different initial values: . solution_array = list() fig, ax = plt.subplots(figsize = (14,7)) for i in range(0, 5): solution = solve_ivp(fun = decay_model, t_span = [0, 6], y0 = [i], dense_output=True) ax.plot(solution.t, solution.y[0], label = fr&quot;$K = {i}$&quot;) ax.set_title(&quot;Exponential Decay Solution&quot;) ax.set_ylabel(r&#39;$Ke^{-t}$&#39;) ax.set_xlabel(r&#39;$t$&#39;) ax.set_xlim(left = 0, right = max(solution.t)) ax.set_ylim(bottom = 0) ax.legend() plt.show() . Now I realize, this was extremely exciting and you just can&#39;t wait for more. Don&#39;t worry, next time we&#39;ll implement an SIR model. And maybe mess with the populations a bit. .",
            "url": "https://darpanganatra.github.io/statsblog/jupyter/python/modelling/comp_bio/2022/05/19/Differential-Equations-1.html",
            "relUrl": "/jupyter/python/modelling/comp_bio/2022/05/19/Differential-Equations-1.html",
            "date": " • May 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Darpan Ganatra. I like learning anything and everything, often times all at once. I’m a data scientist currently, with a masters focused on statistics from the New Jersey Institute of Technology. .",
          "url": "https://darpanganatra.github.io/statsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://darpanganatra.github.io/statsblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}